import { config } from 'dotenv';
import { DeviceTypes, Genders, PackageTypes, UserTypes } from './enums';
import { JwtModule } from '@nestjs/jwt';
import { Device } from './entities/device.entity';
import { CountryList } from './entities/countryList.entity';
import { User } from './entities/user.entity';
import { Student } from './entities/student.entity';
import { Parent } from './entities/parent.entity';
import { Session } from './entities/session.entity';
import { LearningPackage } from './entities/learningPackage.entity';
import { Subscription } from './entities/subscription.entity';
import { CustomerCare } from './entities/customerCare.entity';
import { Invoice } from './entities/invoice.entity';
import { Admin } from './entities/admin.entity';
import { Subject } from './entities/subject.entity';
import { Lesson } from './entities/lesson.entity';
import { Material } from './entities/material.entity';
import { Chapter } from './entities/chapter.entity';
import { LearningPackageList } from './entities/learningPackageList.entity';

config();

const { JWT_SECRET, JWT_EXPIRATION_TIME } = process.env;

//* CONFIGS_________________________________________

export const jwtConfig = JwtModule.register({
  secret: JWT_SECRET,
  signOptions: { expiresIn: `${JWT_EXPIRATION_TIME}` },
});

export const ModuleConfigs = {
  app: {
    entities: [
      // User,
      // Student,
      // Parent,
      // Device,
      // CountryList,
      // Session,
      // LearningPackage,
      Subscription,
      CustomerCare,
      Invoice,
      Admin,
      Subject,
      Lesson,
      Material,
      Chapter,
    ],
  },
  utility: {
    entities: [CountryList, LearningPackage, Device, LearningPackageList],
  },
  auth: {
    entities: [
      User,
      Student,
      Parent,
      Device,
      CountryList,
      Session,
      LearningPackage,
      LearningPackageList,
      Subscription,
    ],
  },
  admin: {
    entities: [
      User,
      Session,
      Student,
      Parent,
      CustomerCare,
      Device,
      CountryList,
      Admin,
      LearningPackageList,
    ],
  },
  subscription: {
    entities: [Subscription, LearningPackage, Invoice],
  },
  content: {
    entities: [],
  },
};

export const GET_ALL_ENTITIES = () => [
  ...new Set(
    [].concat.apply(
      [],
      Object.keys(ModuleConfigs).map((key) =>
        [].concat.apply([], ModuleConfigs[key].entities),
      ),
    ),
  ),
];

//* LEARNING PACKAGES_______________________________________
export const learningPackages = {
  RECEPTION: { name: 'RECEPTION', type: PackageTypes.PRE_SCHOOL },

  GRADE_1: { name: 'GRADE_1', type: PackageTypes.PRIMARY_SCHOOL },
  GRADE_2: { name: 'GRADE_2', type: PackageTypes.PRIMARY_SCHOOL },
  GRADE_3: { name: 'GRADE_3', type: PackageTypes.PRIMARY_SCHOOL },
  GRADE_4: { name: 'GRADE_4', type: PackageTypes.PRIMARY_SCHOOL },
  GRADE_5: { name: 'GRADE_5', type: PackageTypes.PRIMARY_SCHOOL },
  GRADE_6: { name: 'GRADE_6', type: PackageTypes.PRIMARY_SCHOOL },

  LANGUAGES: {
    name: 'NIGERIAN_LANGUAGES',
    type: PackageTypes.LANGUAGES,
  },

  BRITISH: { name: 'BRITISH', type: PackageTypes.SECONDARY_SCHOOL },
  CATHOLIC: { name: 'CATHOLIC', type: PackageTypes.SECONDARY_SCHOOL },
  MILITARY: { name: 'MILITARY', type: PackageTypes.SECONDARY_SCHOOL },
  NATIONAL: { name: 'NATIONAL', type: PackageTypes.SECONDARY_SCHOOL },
};

//* MESSAGES_______________________________________

export const utlityMessages = {
  learningPackages: 'learning packages fetched successfully',
  devices: 'Fetched devices successfully',
  countries: 'Fetched countries successfully',
};
export const utilityErrors = {
  getPackageList: 'failed to fetch pakcage list',
  seedDevices: 'failed to seed devices ',
  seedCountries: 'failed to seed countries ',
  getCountryList: 'failed to fecth country info ',
  seedPackages: 'failed to seed learning packages ',
};

export const subscriptionMessages = {
  create: 'subscription created successfully',
  fetchSubscriptionSuccess: 'Subscriptions fetched successfully',
  fetchInvoiceHistorySuccess: 'Invoices History fetched successfully',
};
export const subscriptionError = {
  create: 'failed to create subscription',
  fetchSubscriptionFailed: 'Failed to fetch Subscriptions',
  fetchSubscriptionHistoryFailed: 'Failed to fetch Subscription history',
  fetchInvoicesFailed: 'Failed to fetch Invoices history',
  checkingSubscription: 'Error querying for finding subscriptions --',
  checkingInvoices: 'Error querying for finding invoices --',
  failedToFetchSubscriptions: 'Failed to fetch subscriptions --',
};

export const authMessages = {
  countries: 'all countries retrieved successfully',
  endpoints: 'authentication endpoints retrieved successfully',
  userCreated: 'user created successfully',
  login: 'login successful',
  teacherCreated: 'Teacher profile created successfully',
  profileUpdateSuccessful: 'profile updated successfully',
  passwordEmailSent: 'reset email sent successfully',
  pwordReset: 'Password reset successfully',
  logout: 'Logout successfully',
};
export const authErrors = {
  getDevice: 'failed to fecth device info ',
  noMockDevice: 'could not find mock device for seeder ',
  sessionExpired:
    'your session has expired. Login again to get a new session and token',
  studentsNotFound: 'could not find students',
  queryingParent: 'could not find parent with user id provided',
  getStudentsFailed: 'failed to fetch students',
  createSession: 'could not create a new session for user ',
  noMockCountryList: 'could not find mock country for seeder ',
  saveUser: 'could not save new user ',
  savedCountries: 'could not save new country to db ',
  createdTeacher: 'could not create new teacher ',
  savedTeacherToUser: 'could not save new teacher id to user ',
  createdSchool: 'could not create new school ',
  savedSchoolToUser: 'could not save new school id to user ',
  createdParent: 'could not create new parent ',
  createdClass: 'could not create new class ',
  createdDevice: 'could not create new device ',
  foundClass: 'could not find class of specified id ',
  savedParentToUser: 'could not save new parent id to user ',
  createdStudent: 'could not create new student ',
  savedStudentToUser: 'could not save new student id to user ',
  savedEntranceExamSubscription:
    'could not create new entrance exam subscription ',
  dupPNQuery: 'query for duplicate phone number failed ',
  dupEmailQuery: 'query for duplicate email failed ',
  tokenCreate: 'could not create token ',
  userTokenUpdate: 'could not update user token ',
  checkingEmail: 'Error querying for matching emails ',
  checkingPassword: 'Error querying for matching passwords ',
  emailNotFound: 'user with specified email not found ',
  invalidPassword: 'your password is incorrect',
  loginFailed: 'login failed ',
  updateFailed: 'login failed ',
  invalidNotificationInformation: 'no email or phone number recieved ',
  invalidToken: 'Invalid Token ',
  noTokenIdMatch: 'could not match user to decoded id ',
  noAuthTokenPassed: 'no authorization token passed ',
  noCookieTokenPassed: 'no token passed via cookies ',
  invalidEmail: 'no user with given email ',
  savePin: 'could not save user reset pin ',
  userNotFoundById: 'Could not find matching user of given id ',
  queryById: 'Error querying user via id  ',
  sameNewAndPrevPassword: 'New Password is the same as old password ',
  savingNewPword: 'Error updating user password ',
  findingUserWithId: 'Could not find user with given id ',
  checkingParent: 'Error querying for finding parent ',
  updatingParent: 'Error querying for updating parent ',
  checkingStudent: 'Error querying for student ',
  updatingStudent: 'Error querying for updating student ',
  parentNotFound: 'could not find parent with id provided ',
  logoutFailed: 'could not logout ',
  checkingSession: 'could not found session ',
};

export const contentMessages = {};
export const contentErrors = {};

export const profileMessages = {
  updatedSuccess: 'Profile updated successfully',
  updatedFail: 'Profile updated successfully',
  userNotFound: 'No user found',
};

export const adminMessages = {
  fetchSessionSuccess: 'User sessions fetched successfully',
  endSessionSuccess: 'User sessions ended successfully',
  recoverSessionSuccess: 'User sessions recovered successfully',
  userSuspendedSuccess: 'User suspended successfully',
  studentFetchSuccess: 'Students Fetched successfully',
  addCustomerCareSuccess: 'Customer Care Added successfully',
  customerFetchSuccess: 'Customers Fetched successfully ',
  updatedCustomerSuccess: 'Customer profile updated successfully',
  addAdminCreateSuccess: 'Admin created successfully',
  adminFetchSuccess: 'Admin fetched successfully',
};

export const adminErrors = {
  fetchSessionFailed: 'Failed to fetch user sessions ',
  fetchUserFailed: 'Failed to fetch user ',
  endSessionFailed: 'Failed to end user sessions ',
  updateSessionFailed: 'Failed to update user sessions ',
  recoverSessionFailed: 'Failed to recover user sessions ',
  userNotFoundWithId: 'No user found with this id. ',
  checkingUser: 'error while fetching user. ',
  checkingSession: 'error while fetching session. ',
  failedToFetchStudents: 'error while fetching students. ',
  failedToSuspendUser: 'error while suspending user. ',
  sessionNotFoundWithId: 'no session found for this parent. ',
  noParentFound: 'parent not found with this user id. ',
  noUserFound: 'user not found with this id. ',
  tokenCreate: 'could not create token ',
  tokenVerify: 'could not verify session token ',
  customerCareCreateFailed: 'error while creating customer care. ',
  dupPNQuery: 'query for duplicate phone number failed ',
  dupEmailQuery: 'query for duplicate email failed ',
  saveUser: 'could not save new user ',
  updatingCustomer: 'Error querying for updating customer ',
  checkingCustomer: 'Error querying for finding customer ',
  failedToFetchCustomers: 'error while fetching customers. ',
  updateFailed: 'login failed ',
  customerNotFound: 'could not find customer with id provided ',
  failToCreateAdmin: 'Error while creating admin',
  adminCreateFailed: 'Failed to create new admin  ',
  failedToFetchAdmin: 'Failed to fetch admin  ',
  checkingAdmin: 'Error querying for finding admin ',
  adminNotFound: 'could not find admin with id provided ',
  updatingAdmin: 'Error querying for updating admin ',
};

//* SEEDS____________________________________________

export const USER_SEED: Array<{}> = [
  {
    firstName: 'Russell',
    lastName: 'Emekoba',
    gender: Genders.MALE,
    email: 'rjemekoba@gmail.com',
    password: 'Password1$',
    type: UserTypes.PARENT,
    phoneNumber: '08076607130',
    deviceId: '2',
  },
];

export const DEVICE_SEED = {
  type: DeviceTypes.WEB,
};

export const COUNTRY_SEED: {} = {
  Afghanistan: {},
  Albania: {},
  Algeria: {},
  'American Samoa': {},
  Andorra: {},
  Angola: {},
  Anguilla: {},
  Antarctica: {},
  'Antigua and Barbuda': {},
  Argentina: {},
  Armenia: {},
  Aruba: {},
  Australia: {},
  Austria: {},
  Azerbaijan: {},
  'Bahamas (the)': {},
  Bahrain: {},
  Bangladesh: {},
  Barbados: {},
  Belarus: {},
  Belgium: {},
  Belize: {},
  Benin: {},
  Bermuda: {},
  Bhutan: {},
  'Bolivia (Plurinational State of)': {},
  'Bonaire, Sint Eustatius and Saba': {},
  'Bosnia and Herzegovina': {},
  Botswana: {},
  'Bouvet Island': {},
  Brazil: {},
  'British Indian Ocean Territory (the)': {},
  'Brunei Darussalam': {},
  Bulgaria: {},
  'Burkina Faso': {},
  Burundi: {},
  'Cabo Verde': {},
  Cambodia: {},
  Cameroon: {},
  Canada: {},
  'Cayman Islands (the)': {},
  'Central African Republic (the)': {},
  Chad: {},
  Chile: {},
  China: {},
  'Christmas Island': {},
  'Cocos (Keeling) Islands (the)': {},
  Colombia: {},
  'Comoros (the)': {},
  'Congo (the Democratic Republic of the)': {},
  'Congo (the)': {},
  'Cook Islands (the)': {},
  'Costa Rica': {},
  Croatia: {},
  Cuba: {},
  Curaçao: {},
  Cyprus: {},
  Czechia: {},
  "Côte d'Ivoire": {},
  Denmark: {},
  Djibouti: {},
  Dominica: {},
  'Dominican Republic (the)': {},
  Ecuador: {},
  Egypt: {},
  'El Salvador': {},
  'Equatorial Guinea': {},
  Eritrea: {},
  Estonia: {},
  Eswatini: {},
  Ethiopia: {},
  'Falkland Islands (the) [Malvinas]': {},
  'Faroe Islands (the)': {},
  Fiji: {},
  Finland: {},
  France: {},
  'French Guiana': {},
  'French Polynesia': {},
  'French Southern Territories (the)': {},
  Gabon: {},
  'Gambia (the)': {},
  Georgia: {},
  Germany: {},
  Ghana: {},
  Gibraltar: {},
  Greece: {},
  Greenland: {},
  Grenada: {},
  Guadeloupe: {},
  Guam: {},
  Guatemala: {},
  Guernsey: {},
  Guinea: {},
  'Guinea-Bissau': {},
  Guyana: {},
  Haiti: {},
  'Heard Island and McDonald Islands': {},
  'Holy See (the)': {},
  Honduras: {},
  'Hong Kong': {},
  Hungary: {},
  Iceland: {},
  India: {},
  Indonesia: {},
  'Iran (Islamic Republic of)': {},
  Iraq: {},
  Ireland: {},
  'Isle of Man': {},
  Israel: {},
  Italy: {},
  Jamaica: {},
  Japan: {},
  Jersey: {},
  Jordan: {},
  Kazakhstan: {},
  Kenya: { supported: true },
  Kiribati: {},
  "Korea (the Democratic People's Republic of)": {},
  'Korea (the Republic of)': {},
  Kuwait: {},
  Kyrgyzstan: {},
  "Lao People's Democratic Republic (the)": {},
  Latvia: {},
  Lebanon: {},
  Lesotho: {},
  Liberia: {},
  Libya: {},
  Liechtenstein: {},
  Lithuania: {},
  Luxembourg: {},
  Macao: {},
  Madagascar: {},
  Malawi: {},
  Malaysia: {},
  Maldives: {},
  Mali: {},
  Malta: {},
  'Marshall Islands (the)': {},
  Martinique: {},
  Mauritania: {},
  Mauritius: {},
  Mayotte: {},
  Mexico: {},
  'Micronesia (Federated States of)': {},
  'Moldova (the Republic of)': {},
  Monaco: {},
  Mongolia: {},
  Montenegro: {},
  Montserrat: {},
  Morocco: {},
  Mozambique: {},
  Myanmar: {},
  Namibia: {},
  Nauru: {},
  Nepal: {},
  'Netherlands (the)': {},
  'New Caledonia': {},
  'New Zealand': {},
  Nicaragua: {},
  'Niger (the)': {},
  Nigeria: { supported: true },
  Niue: {},
  'Norfolk Island': {},
  'Northern Mariana Islands (the)': {},
  Norway: {},
  Oman: {},
  Pakistan: {},
  Palau: {},
  'Palestine, State of': {},
  Panama: {},
  'Papua New Guinea': {},
  Paraguay: {},
  Peru: {},
  'Philippines (the)': {},
  Pitcairn: {},
  Poland: {},
  Portugal: {},
  'Puerto Rico': {},
  Qatar: {},
  'Republic of North Macedonia': {},
  Romania: {},
  'Russian Federation (the)': {},
  Rwanda: {},
  Réunion: {},
  'Saint Barthélemy': {},
  'Saint Helena, Ascension and Tristan da Cunha': {},
  'Saint Kitts and Nevis': {},
  'Saint Lucia': {},
  'Saint Martin (French part)': {},
  'Saint Pierre and Miquelon': {},
  'Saint Vincent and the Grenadines': {},
  Samoa: {},
  'San Marino': {},
  'Sao Tome and Principe': {},
  'Saudi Arabia': {},
  Senegal: {},
  Serbia: {},
  Seychelles: {},
  'Sierra Leone': {},
  Singapore: {},
  'Sint Maarten (Dutch part)': {},
  Slovakia: {},
  Slovenia: {},
  'Solomon Islands': {},
  Somalia: {},
  'South Africa': {},
  'South Georgia and the South Sandwich Islands': {},
  'South Sudan': {},
  Spain: {},
  'Sri Lanka': {},
  'Sudan (the)': {},
  Suriname: {},
  'Svalbard and Jan Mayen': {},
  Sweden: {},
  Switzerland: {},
  'Syrian Arab Republic': {},
  Taiwan: {},
  Tajikistan: {},
  'Tanzania, United Republic of': {},
  Thailand: {},
  'Timor-Leste': {},
  Togo: {},
  Tokelau: {},
  Tonga: {},
  'Trinidad and Tobago': {},
  Tunisia: {},
  Turkey: {},
  Turkmenistan: {},
  'Turks and Caicos Islands (the)': {},
  Tuvalu: {},
  Uganda: {},
  Ukraine: {},
  'United Arab Emirates (the)': {},
  'United Kingdom of Great Britain and Northern Ireland (the)': {},
  'United States Minor Outlying Islands (the)': {},
  'United States of America (the)': {},
  Uruguay: {},
  Uzbekistan: {},
  Vanuatu: {},
  'Venezuela (Bolivarian Republic of)': {},
  'Viet Nam': {},
  'Virgin Islands (British)': {},
  'Virgin Islands (U.S.)': {},
  'Wallis and Futuna': {},
  'Western Sahara': {},
  Yemen: {},
  Zambia: {},
  Zimbabwe: {},
  'Åland Islands': {},
};
